package com.sistema_bancario.model.pojo;
// Generated 21/07/2017 17:45:32 by Hibernate Tools 4.3.1


import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;

/**
 * Cuenta generated by hbm2java
 */
@Entity
@Table(name="cuenta"
    ,catalog="bancodb"
)
public class Cuenta  implements java.io.Serializable {


     private Integer idcuenta;
     private PropietarioCuenta propietarioCuenta;
     private TipoCuenta tipoCuenta;
     private Double saldo;
     private Boolean activa;
     private Set<Transaccion> transaccionsForCuentaIdcuenta2 = new HashSet<Transaccion>(0);
     private Set<Servicio> servicios = new HashSet<Servicio>(0);
     private Set<Transaccion> transaccionsForCuentaIdcuentaPrincipal = new HashSet<Transaccion>(0);

    public Cuenta() {
    }

	
    public Cuenta(PropietarioCuenta propietarioCuenta, TipoCuenta tipoCuenta) {
        this.propietarioCuenta = propietarioCuenta;
        this.tipoCuenta = tipoCuenta;
    }
    public Cuenta(PropietarioCuenta propietarioCuenta, TipoCuenta tipoCuenta, Double saldo, Boolean activa, Set<Transaccion> transaccionsForCuentaIdcuenta2, Set<Servicio> servicios, Set<Transaccion> transaccionsForCuentaIdcuentaPrincipal) {
       this.propietarioCuenta = propietarioCuenta;
       this.tipoCuenta = tipoCuenta;
       this.saldo = saldo;
       this.activa = activa;
       this.transaccionsForCuentaIdcuenta2 = transaccionsForCuentaIdcuenta2;
       this.servicios = servicios;
       this.transaccionsForCuentaIdcuentaPrincipal = transaccionsForCuentaIdcuentaPrincipal;
    }
   
     @Id @GeneratedValue(strategy=IDENTITY)

    
    @Column(name="idcuenta", unique=true, nullable=false)
    public Integer getIdcuenta() {
        return this.idcuenta;
    }
    
    public void setIdcuenta(Integer idcuenta) {
        this.idcuenta = idcuenta;
    }

@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="usuario_idusuario", nullable=false)
    public PropietarioCuenta getPropietarioCuenta() {
        return this.propietarioCuenta;
    }
    
    public void setPropietarioCuenta(PropietarioCuenta propietarioCuenta) {
        this.propietarioCuenta = propietarioCuenta;
    }

@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="tipo_cuenta_idtipo_cuenta", nullable=false)
    public TipoCuenta getTipoCuenta() {
        return this.tipoCuenta;
    }
    
    public void setTipoCuenta(TipoCuenta tipoCuenta) {
        this.tipoCuenta = tipoCuenta;
    }

    
    @Column(name="saldo", precision=22, scale=0)
    public Double getSaldo() {
        return this.saldo;
    }
    
    public void setSaldo(Double saldo) {
        this.saldo = saldo;
    }

    
    @Column(name="activa")
    public Boolean getActiva() {
        return this.activa;
    }
    
    public void setActiva(Boolean activa) {
        this.activa = activa;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="cuentaByCuentaIdcuenta2")
    public Set<Transaccion> getTransaccionsForCuentaIdcuenta2() {
        return this.transaccionsForCuentaIdcuenta2;
    }
    
    public void setTransaccionsForCuentaIdcuenta2(Set<Transaccion> transaccionsForCuentaIdcuenta2) {
        this.transaccionsForCuentaIdcuenta2 = transaccionsForCuentaIdcuenta2;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="cuenta")
    public Set<Servicio> getServicios() {
        return this.servicios;
    }
    
    public void setServicios(Set<Servicio> servicios) {
        this.servicios = servicios;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="cuentaByCuentaIdcuentaPrincipal")
    public Set<Transaccion> getTransaccionsForCuentaIdcuentaPrincipal() {
        return this.transaccionsForCuentaIdcuentaPrincipal;
    }
    
    public void setTransaccionsForCuentaIdcuentaPrincipal(Set<Transaccion> transaccionsForCuentaIdcuentaPrincipal) {
        this.transaccionsForCuentaIdcuentaPrincipal = transaccionsForCuentaIdcuentaPrincipal;
    }




}


