package com.sistema_bancario.model.pojo;
// Generated 23/07/2017 22:28:09 by Hibernate Tools 4.3.1

import java.util.Date;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.NamedStoredProcedureQueries;
import javax.persistence.NamedStoredProcedureQuery;
import javax.persistence.ParameterMode;
import javax.persistence.StoredProcedureParameter;
import javax.persistence.StoredProcedureQuery;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * Planilla generated by hbm2java
 */
@Entity
@Table(name = "planilla", catalog = "bancodb"
)

/**
 * Mapeo de procedimiento almacenado - registrar_pago_servicio
 */
@NamedStoredProcedureQuery(
        name = "registrar_pago_servicio",
        procedureName = "registrar_pago_servicio",
        parameters = {
            @StoredProcedureParameter(mode = ParameterMode.IN, type = Double.class, name = "valor_pagar"),
            @StoredProcedureParameter(mode = ParameterMode.IN, type = Integer.class, name = "id_planilla"),
            @StoredProcedureParameter(mode = ParameterMode.IN, type = Integer.class, name = "id_servicio"),
            @StoredProcedureParameter(mode = ParameterMode.IN, type = Integer.class, name = "id_cuenta_principal"),
            @StoredProcedureParameter(mode = ParameterMode.OUT, type = Integer.class, name = "valor_retorno")})

public class Planilla implements java.io.Serializable {

    private Integer idplanilla;
    private Servicio servicio;
    private Transaccion transaccion;
    private Double valor;
    private String idContratoCliente;
    private Date fechaEmision;
    private Date fechaPago;
    private String estado;

    /**
     * Variable EntityManagerFactory para la ejecución del SP
     */
    private EntityManagerFactory emf;

    public Planilla() {
    }

    public Planilla(Servicio servicio) {
        this.servicio = servicio;
    }

    public Planilla(Servicio servicio, Transaccion transaccion, Double valor, String idContratoCliente, Date fechaEmision, Date fechaPago, String estado) {
        this.servicio = servicio;
        this.transaccion = transaccion;
        this.valor = valor;
        this.idContratoCliente = idContratoCliente;
        this.fechaEmision = fechaEmision;
        this.fechaPago = fechaPago;
        this.estado = estado;
    }

    @Id
    @GeneratedValue(strategy = IDENTITY)

    @Column(name = "idplanilla", unique = true, nullable = false)
    public Integer getIdplanilla() {
        return this.idplanilla;
    }

    public void setIdplanilla(Integer idplanilla) {
        this.idplanilla = idplanilla;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "servicio_idservicio", nullable = false)
    public Servicio getServicio() {
        return this.servicio;
    }

    public void setServicio(Servicio servicio) {
        this.servicio = servicio;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "transaccion_idtransaccion")
    public Transaccion getTransaccion() {
        return this.transaccion;
    }

    public void setTransaccion(Transaccion transaccion) {
        this.transaccion = transaccion;
    }

    @Column(name = "valor", precision = 22, scale = 0)
    public Double getValor() {
        return this.valor;
    }

    public void setValor(Double valor) {
        this.valor = valor;
    }

    @Column(name = "id_contrato_cliente", length = 45)
    public String getIdContratoCliente() {
        return this.idContratoCliente;
    }

    public void setIdContratoCliente(String idContratoCliente) {
        this.idContratoCliente = idContratoCliente;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "fecha_emision", length = 19)
    public Date getFechaEmision() {
        return this.fechaEmision;
    }

    public void setFechaEmision(Date fechaEmision) {
        this.fechaEmision = fechaEmision;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "fecha_pago", length = 19)
    public Date getFechaPago() {
        return this.fechaPago;
    }

    public void setFechaPago(Date fechaPago) {
        this.fechaPago = fechaPago;
    }

    @Column(name = "estado", length = 45)
    public String getEstado() {
        return this.estado;
    }

    public void setEstado(String estado) {
        this.estado = estado;
    }
    
    /**
     * Método para cancelar servivios básicos
     * @param valor_pagar
     * @param id_planilla
     * @param id_servicio
     * @param id_cuenta_principal
     * @return 
     */

    public Integer pago_servicio(Double valor_pagar, Integer id_planilla,
            Integer id_servicio, Integer id_cuenta_principal) {
        
        EntityManager em = emf.createEntityManager();
        em.getTransaction().begin();
        
        StoredProcedureQuery query = em.createNamedStoredProcedureQuery("registrar_pago_servicio");
        query.setParameter("valor_pagar", valor_pagar);
        query.setParameter("id_planilla", id_planilla);
        query.setParameter("id_servicio", id_servicio);
        query.setParameter("id_cuenta_principal", id_cuenta_principal);
        query.execute();
        
        Integer valor_retorno = (Integer) query.getOutputParameterValue("valor_retorno");
        
        em.getTransaction().commit();
        em.close();
        
        return valor_retorno;
    }

}
